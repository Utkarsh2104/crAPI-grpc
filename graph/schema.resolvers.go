package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"
	"grpc/graph/model"
	"grpc/grpc_client"
	"grpc/models"
	"log"
)

// CreatePost is the resolver for the CreatePost field.
func (r *mutationResolver) CreatePost(ctx context.Context, id *string) (bool, error) {
	// post := models.PrepareNewPost(model.Post{})

	// res, err := grpc_client.CreatePost(":9090", post)
	// if err != nil {
	// 	log.Fatalf("Error while creating Post by graphQL ..... %v", err)
	// } else {
	// 	println("Creating Post by GraphQL successful .. message on GraphQl server, :))")
	// 	println("Received response, ", res)
	// }
	// return res, nil

	panic(fmt.Errorf("not implemented: GetCoupons - GetCoupons"))
}

// UpdatePost is the resolver for the UpdatePost field.
func (r *mutationResolver) UpdatePost(ctx context.Context, id string, input model.PostInput) (bool, error) {
	// 	res, err := grpc_client.UpdatePost(":9090", id, input)

	// 	if err != nil {
	// 		log.Fatalf("Error while updating post....%v", err)
	// 	} else {
	// 		println("post updated successfully..., res = ", res)
	// 	}
	// 	return res, nil
	panic(fmt.Errorf("not implemented: GetCoupons - GetCoupons"))
}

// DeletePost is the resolver for the DeletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, postsID []string) ([]string, error) {
	// res, err := grpc_client.DeletePost(":9090", postsID)

	// if err != nil {
	// 	log.Fatalf("Error while deleting post ..... %v", err)
	// } else {
	// 	println("Post delete successfully ..... wohoo!")
	// }
	// return res, err

	panic(fmt.Errorf("not implemented: GetCoupons - GetCoupons"))
}

// CreateUser is the resolver for the CreateUser field.
func (r *mutationResolver) CreateUser(ctx context.Context) (bool, error) {
	user := models.PrepareNewUser(model.User{})

	res, err := grpc_client.CreateUser(":9090", user)
	if err != nil {
		log.Fatalf("Error while creating User by graphQL ..... %v", err)
	} else {
		println("Creating User by GraphQL successful .. message on GraphQl server, :))")
		println("Received response, ", res)
	}
	return res, nil
}

// UpdateUser is the resolver for the UpdateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input model.UserInput) (bool, error) {
	res, err := grpc_client.UpdateUser(":9090", id, input)

	if err != nil {
		log.Fatalf("Error while updating user....%v", err)
	} else {
		println("user updated successfully..., res = ", res)
	}
	return res, nil
}

// DeleteUser is the resolver for the DeleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, usersID []string) ([]string, error) {
	res, err := grpc_client.DeleteUser(":9090", usersID)

	if err != nil {
		log.Fatalf("Error while deleting user ..... %v", err)
	} else {
		println("User delete successfully ..... wohoo!")
	}
	return res, err
}

// CreateCoupon is the resolver for the CreateCoupon field.
func (r *mutationResolver) CreateCoupon(ctx context.Context, coupon model.CouponInput) (*bool, error) {
	panic(fmt.Errorf("not implemented: CreateCoupon - CreateCoupon"))
}

// UpdateCoupon is the resolver for the UpdateCoupon field.
func (r *mutationResolver) UpdateCoupon(ctx context.Context, id string, coupon model.CouponInput) (*bool, error) {
	panic(fmt.Errorf("not implemented: UpdateCoupon - UpdateCoupon"))
}

// DeleteCoupon is the resolver for the DeleteCoupon field.
func (r *mutationResolver) DeleteCoupon(ctx context.Context, coupons []string) ([]string, error) {
	panic(fmt.Errorf("not implemented: DeleteCoupon - DeleteCoupon"))
}

// CreateComment is the resolver for the CreateComment field.
func (r *mutationResolver) CreateComment(ctx context.Context) (bool, error) {
	comment := models.PrepareNewComment(model.Comment{})

	res, err := grpc_client.CreateComment(":9090", comment)
	if err != nil {
		log.Fatalf("Error while creating Comment by graphQL ..... %v", err)
	} else {
		println("Creating Comment by GraphQL successful .. message on GraphQl server, :))")
		println("Received response, ", res)
	}
	return res, nil
}

// UpdateComment is the resolver for the UpdateComment field.
func (r *mutationResolver) UpdateComment(ctx context.Context, id string, input model.CommentInput) (bool, error) {
	res, err := grpc_client.UpdateComment(":9090", id, input)

	if err != nil {
		log.Fatalf("Error while updating comment....%v", err)
	} else {
		println("comment updated successfully..., res = ", res)
	}
	return res, nil
}

// DeleteComment is the resolver for the DeleteComment field.
func (r *mutationResolver) DeleteComment(ctx context.Context, commentsID []string) ([]string, error) {
	res, err := grpc_client.DeleteComment(":9090", commentsID)

	if err != nil {
		log.Fatalf("Error while deleting comment ..... %v", err)
	} else {
		println("Comment delete successfully ..... wohoo!")
	}
	return res, err
}

// GetPosts is the resolver for the GetPosts field.
func (r *queryResolver) GetPosts(ctx context.Context, ids []string) ([]*model.Post, error) {
	// // lis := []string{"oBvaQhfFqVWVdDBgAhaER6", "MnwSHsuN9okaPEiSerDuA3"}
	// posts := grpc_client.GetPosts(":9090", ids)

	// ret := []*model.Post{}
	// for i := 0; i < len(posts.Posts); i++ {
	// 	p := model.Post{
	// 		ID:        posts.Posts[i].Id,
	// 		Title:     posts.Posts[i].Title,
	// 		Content:   posts.Posts[i].Content,
	// 		Author:    posts.Posts[i].Author,
	// 		Comments:  posts.Posts[i].Comments,
	// 		AuthorID:  posts.Posts[i].AuthorId,
	// 		CreatedAt: posts.Posts[i].CreatedAt,
	// 	}

	// 	ret = append(ret, &p)
	// }
	// return ret, nil
	panic(fmt.Errorf("not implemented: GetCoupons - GetCoupons"))
}

// GetUsers is the resolver for the GetUsers field.
func (r *queryResolver) GetUsers(ctx context.Context, ids []string) ([]*model.User, error) {
	// lis := []string{"oBvaQhfFqVWVdDBgAhaER6", "MnwSHsuN9okaPEiSerDuA3"}
	users := grpc_client.GetUsers(":9090", ids)

	ret := []*model.User{}
	for i := 0; i < len(users.Users); i++ {
		u := model.User{
			ID:        users.Users[i].Id,
			Nickname:  users.Users[i].Nickname,
			Email:     users.Users[i].Email,
			VehicleID: users.Users[i].VehicleId,
			Picurl:    users.Users[i].Picurl,
			CreatedAt: users.Users[i].CreatedAt,
		}

		ret = append(ret, &u)
	}
	return ret, nil
}

// GetCoupons is the resolver for the GetCoupons field.
func (r *queryResolver) GetCoupons(ctx context.Context, codes []*string) ([]*model.Coupon, error) {
	panic(fmt.Errorf("not implemented: GetCoupons - GetCoupons"))
}

// GetComments is the resolver for the GetComments field.
func (r *queryResolver) GetComments(ctx context.Context, ids []string) ([]*model.Comment, error) {
	// lis := []string{"oBvaQhfFqVWVdDBgAhaER6", "MnwSHsuN9okaPEiSerDuA3"}
	comments := grpc_client.GetComments(":9090", ids)

	ret := []*model.Comment{}
	for i := 0; i < len(comments.Comments); i++ {
		c := model.Comment{
			ID:        comments.Comments[i].Id,
			Content:   comments.Comments[i].Content,
			Author:    comments.Comments[i].Author,
			CreatedAt: comments.Comments[i].CreatedAt,
		}

		ret = append(ret, &c)
	}
	return ret, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
